|00 @System     &vector $2 &pad     $6 &r      $2 &g     $2 &b     $2 &dbg $1 &hlt
|10 @Console    &vector $2 &read    $1 &pad    $5 &write $1
|20 @Screen     &vector $2 &width   $2 &height $2 &auto  $1 &pad   $1 &x     $2 &y $2 &addr $2 &pixel $1 &sprite $1
|80 @Controller &vector $2 &button  $1 &key    $1
|90 @Mouse      &vector $2 &x       $2 &y      $2 &state $1 &chord $1
|a0 @File       &vector $2 &success $2 &offset $2 &pad   $2 &name  $2 &length $2 &read $2 &write $2

|0100
#2ce9 .System/r DEO2
#01c0 .System/g DEO2
#2ce5 .System/b DEO2

;startmsg ;print-word JSR2

;filename ;print-word JSR2
%NEWLINE { #0a .Console/write DEO }
NEWLINE

( ------------------ FILE READING BUSINES -------------- )
#ff00 .File/length DEO2
;filename .File/name DEO2
;file .File/read DEO2

.File/success DEI2

( show success code )
;bytes-read-str ;print-word JSR2
;print-dec2 JSR2 NEWLINE

( cat the file yay )
( ;file ;print-word JSR2 )

( ------------------ ACTUAL DAY 01b CODE -------------- )

( ;prevstr ;print-word JSR2 ;printbyte2k JSR2 NEWLINE )

( -- init -- )
;file ;parse-dec JSR2 ;window/a STA2

;parse-dec JSR2 ;window/b STA2

;parse-dec JSR2 ;window/c STA2

;parse-dec JSR2 ;window/d STA2

;inputptr ;print-word JSR2 ;printbyte2k JSR2 NEWLINE

%SPACE { #20 .Console/write DEO }
;prevstr ;print-word JSR2
        ;window/a LDA2 ;print-dec2 JSR2 SPACE
        ;window/b LDA2 ;print-dec2 JSR2 SPACE
        ;window/c LDA2 ;print-dec2 JSR2 NEWLINE
;currstr ;print-word JSR2
        ;window/b LDA2 ;print-dec2 JSR2 SPACE
        ;window/c LDA2 ;print-dec2 JSR2 SPACE
        ;window/d LDA2 ;print-dec2 JSR2 NEWLINE

;inputptr ;print-word JSR2 ;printbyte2k JSR2 NEWLINE
    #ff .System/dbg DEO

@while
    ( ;startmsg ;print-word JSR2 NEWLINE )
    ( add the 2 slices )
    ;window/b LDA2 ;window/c LDA2 ADD2 ;window/d LDA2 ADD2
    ;currstr ;print-word JSR2 ;print-dec2k JSR2 NEWLINE
    ;window/a LDA2 ;window/b LDA2 ADD2 ;window/c LDA2 ADD2
    ;prevstr ;print-word JSR2 ;print-dec2k JSR2 NEWLINE

    GTH2 ,&increment JCN
        ,&end JMP

    &increment
        ;count LDA2 INC2 ;count STA2

    &end
    ( slide the window )
    ;window/b LDA2 ;window/a STA2
    ;window/c LDA2 ;window/b STA2
    ;window/d LDA2 ;window/c STA2

    (  ;inputptr ;print-word JSR2 ;printbyte2k JSR2 NEWLINE )

    ;parse-dec JSR2 DUP2
        ;window/d STA2

    ;newval ;print-word JSR2 ;print-dec2k JSR2 NEWLINE
    ( check if we reached the end )
    ORA
    ( ;printbytek JSR2 NEWLINE )
    ,&cont JCN ( if curr is 0, exit )
        ;out JMP2
    &cont
    ( ;continuing ;print-word JSR2 NEWLINE )

    ( #ff .System/dbg DEO )
;while JMP2
@out

;endmsg ;print-word JSR2

;countstr ;print-word JSR2
( ;count LDA2 ;printbyte2 JSR2 NEWLINE )
;count LDA2 ;print-dec2 JSR2 NEWLINE

#01 .System/hlt DEO
BRK

( -------------- GLOBALS ------------ )

@count $2
@window
&a $2
&b $2
&c $2
&d $2

( -------------- STRINGS ------------ )

@startmsg "hello 20 "there! 20 "why 20 "no 20 "spaces 20 "tho 0a 00
@endmsg "done! 0a 00
@bytes-read-str "bytes 20 "read: 20 00
@countstr "count: 20 00
@prevstr "prev: 20 00
@currstr "curr: 20 00
@newval "new 20 "value: 20 00
@continuing "continuing 00
@inputptr "inputptr: 20 00
@filename "input.txt 00

( -------------- LIB ------------ )

@print-word ( word* -- )
    &while
        LDAk .Console/write DEO
        INC2 ( at the top of the stack is the word pointer, next char )
        LDAk  ( actually load said char, keeping the pointer )
        ,&while JCN ( here the char is used for the condition )
    POP2
JMP2r

@hexchars "0123456789ABCDEF

@printbytek
    ( str_left_nib = hexchars[a >> 4] )
    DUP
    #00
    SWP
    #04 SFT
    ;hexchars ADD2 LDA .Console/write DEO
    DUP
    #00
    SWP
    #0f AND
    ;hexchars ADD2 LDA .Console/write DEO
    ( #ff .System/dbg DEO )
JMP2r

@printbyte
    ;printbytek JSR2
    POP
JMP2r

@printbyte2k
    SWP
    ;printbytek JSR2
    SWP
    ;printbytek JSR2
JMP2r

@printbyte2
    ;printbyte2k JSR2
    POP2
JMP2r

@parse-dec ( str* -- str'* val )
    #0000 ,&total STR2

    &while

        LDAk DUP ( 1 to compare, 1 to take )
        #30 LTH ,&end0 JCN ( if < 0x30 return 0 )
        #30 SUB ( get a number for the 1st digit )
        #00 SWP ( expand to word )
        ,&total LDR2 #000a MUL2 ADD2 ,&total STR2 ( add to total )

        ( try to get a 2nd character )
        INC2

    ,&while JMP

    &end0
    POP ( pop the end char )
    ( POP2 pop the input address )
    INC2
    ,&total LDR2 ( return value )
JMP2r
&total $2

%HEXNIB { ;hexchars ADD2 LDA .Console/write DEO }
@print-dec2k ( x )
    DUP2 DUP2

    #2710 DIV2
    DUP2 HEXNIB
    #2710 MUL2
    SUB2

    DUP2
    #03e8 DIV2
    DUP2 HEXNIB
    #03e8 MUL2
    SUB2

    DUP2
    #0064 DIV2
    DUP2 HEXNIB
    #0064 MUL2
    SUB2

    DUP2
    #000a DIV2
    DUP2 HEXNIB
    #000a MUL2
    SUB2

    HEXNIB
JMP2r

@print-dec2 ( x )
    ;print-dec2k JSR2
    POP2
JMP2r

@file
