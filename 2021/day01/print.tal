|00 @System     &vector $2 &pad     $6 &r      $2 &g     $2 &b     $2 &dbg $1 &hlt
|10 @Console    &vector $2 &read    $1 &pad    $5 &write $1
|20 @Screen     &vector $2 &width   $2 &height $2 &auto  $1 &pad   $1 &x     $2 &y $2 &addr $2 &pixel $1 &sprite $1
|80 @Controller &vector $2 &button  $1 &key    $1
|90 @Mouse      &vector $2 &x       $2 &y      $2 &state $1 &chord $1
|a0 @File       &vector $2 &success $2 &offset $2 &pad   $2 &name  $2 &length $2 &read $2 &write $2

|0100
#2ce9 .System/r DEO2
#01c0 .System/g DEO2
#2ce5 .System/b DEO2

;startmsg ;print-word JSR2
#42 ;printbyte JSR2
#0a .Console/write DEO

#cafe ;printbyte2 JSR2
#0a .Console/write DEO

#ff .System/dbg DEO

%NEWLINE { #0a .Console/write DEO }
#ffff ;print-dec2k JSR2 NEWLINE
#00ff ;print-dec2k JSR2 NEWLINE
#ff .System/dbg DEO

;endmsg ;print-word JSR2

#01 .System/hlt DEO
BRK

@printbytek
    ( str_left_nib = hexchars[a >> 4] )
    DUP
    #00
    SWP
    #04 SFT
    ;hexchars ADD2 LDA .Console/write DEO
    DUP
    #00
    SWP
    #0f AND
    ;hexchars ADD2 LDA .Console/write DEO
    ( #ff .System/dbg DEO )
JMP2r

@printbyte
    ;printbytek JSR2
    POP
JMP2r

@printbyte2k
    SWP
    ;printbytek JSR2
    SWP
    ;printbytek JSR2
JMP2r

@printbyte2
    ;printbyte2k JSR2
    POP2
JMP2r

@print-word ( word* -- )
	&while
		LDAk .Console/write DEO
		INC2 ( at the top of the stack is the word pointer, next char )
        LDAk  ( actually load said char, keeping the pointer )
        ,&while JCN ( here the char is used for the condition )
	POP2
JMP2r

%HEXNIB { ;hexchars ADD2 LDA .Console/write DEO }
@print-dec2k ( x )
    DUP2 DUP2

    #2710 DIV2
    DUP2 HEXNIB
    #2710 MUL2
    SUB2

    DUP2
    #03e8 DIV2
    DUP2 HEXNIB
    #03e8 MUL2
    SUB2

    DUP2
    #0064 DIV2
    DUP2 HEXNIB
    #0064 MUL2
    SUB2

    DUP2
    #000a DIV2
    DUP2 HEXNIB
    #000a MUL2
    SUB2

    HEXNIB
JMP2r

@startmsg "hello 20 "there 20 "why 20 "no 20 "spaces 20 "tho 0a 00
@endmsg "ending 0a 00
@hexchars "0123456789ABCDEF
