|00 @System     &vector $2 &pad     $6 &r      $2 &g     $2 &b     $2 &dbg $1 &hlt
|10 @Console    &vector $2 &read    $1 &pad    $5 &write $1
|20 @Screen     &vector $2 &width   $2 &height $2 &auto  $1 &pad   $1 &x     $2 &y $2 &addr $2 &pixel $1 &sprite $1
|80 @Controller &vector $2 &button  $1 &key    $1
|90 @Mouse      &vector $2 &x       $2 &y      $2 &state $1 &chord $1
|a0 @File       &vector $2 &success $2 &offset $2 &pad   $2 &name  $2 &length $2 &read $2 &write $2

%NEWLINE { #0a .Console/write DEO }
%SEP { LIT '; .Console/write DEO #20 .Console/write DEO }
%DEBUG { #ff .System/dbg DEO }

|0100
#0cf0 .System/r DEO2
#0cfe .System/g DEO2
#2c60 .System/b DEO2

( #2a #08 ;draw-sub JSR2 )

#0018 .Screen/y DEO2
#0008 .Screen/x DEO2
;startmsg1a ;print-scr-word JSR2

;startmsg1a ;print-word JSR2

;filename ;print-word JSR2
NEWLINE

( ------------------ FILE READING BUSINESS -------------- )
#ff00 .File/length DEO2
;filename .File/name DEO2
;file .File/read DEO2

.File/success DEI2

( show success code )
;bytes-read-str ;print-word JSR2
;print-dec2 JSR2 NEWLINE

( cat the file yay )
( ;file ;print-word JSR2 )

( ------------------ ACTUAL DAY 03 CODE -------------- )
;file

@while1
    ( ;nextnum ;print-word JSR2 )
    ;parse-bin JSR2
    ( ;print-dec2k JSR2 NEWLINE )
    ( check exit )
    DUP2 ORA #00 EQU ,&out JCN
    ;sums
    ( inner loop - stack: num' sums' )
    &nextbit
    ( ;nextbit ;print-word JSR2 )
    OVR2 ( stack: num' sums' num' )
    #0001 AND2 ORA ( num' sums' b )
    ,&inc JCN
    ,&noinc JMP
    &inc
        ( ;increasing ;print-word JSR2 )
        LDA2k ( num' sums' x )
        INC2 ( num' sums' x+ )
        SWP2 ( num' x' sums' )
        STA2k ( num' x' sums' )
        NIP2 ( num' sums' )
    &noinc
    SWP2 #01 SFT2 SWP2 ( shift num' )
    INC2 INC2 ( advance sums )
    ( check end )
    DUP2 ;sums/end LTH2 ,&nextbit JCN ( stack: num' sums' )
    POP2 POP2
    ;count LDA2 INC2 ;count STA2
;while1 JMP2

&out
POP2 ( 0000 )
POP2 ( file-end )

;count LDA2 #0002 DIV2 ;count STA2
;count LDA2 ;printbyte2 JSR2 NEWLINE

@avg
#0000
;sums
    &nextbit
    ( ;nextbit ;print-word JSR2 )
    LDA2k ( x sums' s )
    ( ;printbyte2k JSR2 NEWLINE )
    ;count LDA2 LTH2 ,&zero JCN
        ( x sums' )
        SWP2
        #1000 ORA2
        ,&cont JMP
    &zero
        ( x sums' )
        SWP2
    &cont
    #01 SFT2
    SWP2
    INC2 INC2
    DUP2 ;sums/end LTH2 ,&nextbit JCN ( stack: x sums' )
POP2

;endmsg ;print-word JSR2

;answerstr ;print-word JSR2
;printbyte2k JSR2 SEP #0fff EOR2 ;printbyte2 JSR2 NEWLINE

(#0030 .Screen/y DEO2 #0008 .Screen/x DEO2
;answerstr ;print-scr-word JSR2)
( ;print-dec-scr2k JSR2 POP2 )

#00 ;star JSR2

( -------------- DAY 3B ------------- )

#0040 .Screen/y DEO2
#0008 .Screen/x DEO2
;startmsg1b ;print-scr-word JSR2

;startmsg1b ;print-word JSR2

;file
    ( #ff .System/dbg DEO )

@while2

    ,&out JMP
;while2 JMP2

&out

;endmsg ;print-word JSR2

;answerstr ;print-word JSR2

#01 ;star JSR2


( #01 .System/hlt DEO )
BRK

( -------------- GLOBALS ------------ )

@sums $18 ( 12 * 2 = 24 = 0x18 )
&end
@count $2

( -------------- STRINGS ------------ )

@startmsg1a "running 20 "day 20 "3A... 0a 00
@startmsg1b "running 20 "day 20 "3B... 0a 00
@endmsg "done! 0a 00
@bytes-read-str "bytes 20 "read: 20 00
@answerstr "answer: 20 00
@outstr "out! 0a 00
@newval "new 20 "value: 20 00
@continuing "continuing 00
@overflow "overflow 0a 00
@nooverflow "no 20 "overflow 0a 00
@increasing "increasing 0a 00
@nextbit "nextbit 0a 00
@nextnum "nextnum 0a 00
@inputptr "inputptr: 20 00
@filename "input.txt 00
@asdf "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmopqrstuvwxyz 00

( -------------- LIB ------------ )

@print-word ( word* -- )
    &while
        LDAk .Console/write DEO
        INC2 ( at the top of the stack is the word pointer, next char )
        LDAk  ( actually load said char, keeping the pointer )
        ,&while JCN ( here the char is used for the condition )
    POP2
JMP2r

@hexchars "0123456789ABCDEF

@printbytek
    ( str_left_nib = hexchars[a >> 4] )
    DUP
    #00
    SWP
    #04 SFT
    ;hexchars ADD2 LDA .Console/write DEO
    DUP
    #00
    SWP
    #0f AND
    ;hexchars ADD2 LDA .Console/write DEO
    ( #ff .System/dbg DEO )
JMP2r

@printbyte
    ;printbytek JSR2
    POP
JMP2r

@printbyte2k
    SWP
    ;printbytek JSR2
    SWP
    ;printbytek JSR2
JMP2r

@printbyte2
    ;printbyte2k JSR2
    POP2
JMP2r

@parse-dec ( str* -- str'* val )
    #0000 ,&total STR2

    &while

        LDAk DUP ( 1 to compare, 1 to take )
        #30 LTH ,&end0 JCN ( if < 0x30 return 0 )
        #30 SUB ( get a number for the 1st digit )
        #00 SWP ( expand to word )
        ,&total LDR2 #000a MUL2 ADD2 ,&total STR2 ( add to total )

        ( try to get a 2nd character )
        INC2

    ,&while JMP

    &end0
    POP ( pop the end char )
    INC2
    ,&total LDR2 ( return value )
JMP2r
&total $2

@parse-bin ( str* -- str'* out* )
    #0000 ,&total STR2
    &while
        LDAk DUP ( 1 to compare, 1 to take )
        #30 LTH ,&end0 JCN ( if < 0x30 return 0 )
        #30 SUB ( get a number for the 1st digit )
        #00 SWP ( expand to word )
        ,&total LDR2 #10 SFT2 ADD2 ,&total STR2 ( add to total )

        ( try to get a 2nd character )
        INC2

    ,&while JMP

    &end0
    POP ( pop the end char )
    INC2
    ,&total LDR2 ( return value )

JMP2r
&total $2

@print-dec

%DECDIG { LIT '0' ADD .Console/write DEO }
@print-dec2k ( x )
    DUP2 DUP2
    #2710 DIV2 DUP DECDIG #2710 MUL2 SUB2
    DUP2
    #03e8 DIV2 DUP DECDIG #03e8 MUL2 SUB2
    DUP2
    #0064 DIV2 DUP DECDIG #0064 MUL2 SUB2
    DUP2
    #000a DIV2 DUP DECDIG #000a MUL2 SUB2
    DECDIG POP
JMP2r

@hexnibscr ( xx )
    ;hexchars ADD2 LDA ( compute char addr )
    #20 SUB #00 SWP #0008 MUL2 ;font ADD2 .Screen/addr DEO2
    #01 .Screen/sprite DEO ( draw )
    .Screen/x DEI2 #0008 ADD2 .Screen/x DEO2 ( advance cursor )
JMP2r

@decdigscr ( x )
    #10 ADD
    #00 SWP #0008 MUL2 ;font ADD2 .Screen/addr DEO2
    #01 .Screen/sprite DEO ( draw )
    .Screen/x DEI2 #0008 ADD2 .Screen/x DEO2 ( advance cursor )
JMP2r

@print-dec-scr2k ( x )
    DUP2 DUP2
    #2710 DIV2 DUP ;decdigscr JSR2 #2710 MUL2 SUB2
    DUP2
    #03e8 DIV2 DUP ;decdigscr JSR2 #03e8 MUL2 SUB2
    DUP2
    #0064 DIV2 DUP ;decdigscr JSR2 #0064 MUL2 SUB2
    DUP2
    #000a DIV2 DUP ;decdigscr JSR2 #000a MUL2 SUB2
    ;decdigscr JSR2 POP
JMP2r

@print-dec2 ( x )
    ;print-dec2k JSR2
    POP2
JMP2r

@adds4 ( addr to 32bit accumulator, 16bit n )
    ( DEBUG )
    STH2 ( put n in the return stack )
    INC2 INC2 ( get to the lower short addr )
    LDA2k ( fetch the lower short )
    ( ;continuing ;print-word JSR2 )
    STH2r ( get n back )
    ADD2k ( add n keeping all, stack has: addr, lower, sum )
    ( ;printbyte2k JSR2 NEWLINE )
    GTH2k ( stack has: addrl, lower, n, sum, <comp )
        #01 NEQ ,&nooverflow JCN ( comp is discarded, we have overflow )
        ( ;overflow ;print-word JSR2 )
        SWP2 POP2 ( pop old lo; stack: addrl, n, sum )
        SWP2 POP2 ( pop n; stack: addrl, n, sum )
        ( ;printbyte2k JSR2 NEWLINE )
        SWP2 ( stack has: sum, addrl )
        STA2k ( save sum )
        SWP2 POP2 ( discard sum; stack: addrl )
        #0002 SUB2 ( get back to hi )
        LDA2k INC2 ( get hi and add the carry )
        SWP2 STA2 ( and save it )
        JMP2r
    &nooverflow
    ( ;nooverflow ;print-word JSR2 )
    SWP2 POP2 ( pop old lo; stack: addrl, n, sum )
    SWP2 POP2 ( pop n; stack: addrl, sum )
    SWP2 ( stack has: sum, addrl )
    STA2 ( save sum )
    JMP2r

@mul4 (16bit x 16bit = 32bit)
    ( AB * CD = [A*C << 16] + [[B*C + A*D] << 8] + B*D )
    ,&dl STR ,&cl STR ,&bl STR ,&al STR

  ( A*C << 16 )
    ,&a LDR2 ,&c LDR2 MUL2 ,&resulta STR2

  ( [B*C+A*D] << 8 )
    ,&b LDR2 ,&c LDR2 MUL2 DUP2 ,&tmp STR2
    ,&a LDR2 ,&d LDR2 MUL2
    ADD2 ( carry )
        DUP2 ,&tmp LDR2
        LTH2 #01 NEQ ,&nooverflow JCN
        ,&resulta LDR #01 ADD ,&resulta STR
    &nooverflow
    ,&resultb LDR2 ADD2 ,&resultb STR2

    ,&b LDR2 ,&d LDR2 DUP2 ,&tmp STR2 MUL2
    ,&resultc LDR2 ADD2 ( carry )
        DUP2 ,&tmp LDR2
        LTH2 #01 NEQ ,&nooverflow2 JCN
        ,&resultb LDR #01 ADD ,&resultb STR
    &nooverflow2

    ,&resultc STR2

    ,&resultc LDR2
    ,&resulta LDR2

JMP2r
&a $1 &al $1
&b $1 &bl $1
&c $1 &cl $1
&d $1 &dl $1

&resulta $1 &resultb $1 &resultc $1 &resultd $1
&tmp $2

@print-scr-word
    &while
        LDAk
        DUP #20 GTH ,&c JCN POP #20 ( ignore all control chars )
        &c #20 SUB #00 SWP #0008 MUL2 ;font ADD2 .Screen/addr DEO2
        #01 .Screen/sprite DEO
        .Screen/x DEI2 #0008 ADD2 .Screen/x DEO2

        INC2 ( at the top of the stack is the word pointer, next char )
        LDAk  ( actually load said char, keeping the pointer )
        ,&while JCN ( here the char is used for the condition )
    POP2
JMP2r

@star ( n )
    #08 MUL #00 SWP #0008 ADD2 .Screen/x DEO2
    #0008 .Screen/y DEO2
    ;star-icn .Screen/addr DEO2
    #02 .Screen/sprite DEO
JMP2r

@star-icn 0818 7e3c 1824 4200

@draw-sub ( x y )
    #08 ADD
    #00 SWP #0008 MUL2 .Screen/y DEO2
    #00 SWP #0008 MUL2 .Screen/x DEO2
    ;sub-icn .Screen/addr DEO2
    #02 .Screen/sprite DEO
    .Screen/x DEI2 #0008 ADD2 .Screen/x DEO2 ( right )
    ;sub-icn/b .Screen/addr DEO2
    #02 .Screen/sprite DEO
    .Screen/x DEI2 #0008 SUB2 .Screen/x DEO2 ( bottom left )
    .Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
    ;sub-icn/c .Screen/addr DEO2
    #02 .Screen/sprite DEO
    .Screen/x DEI2 #0008 ADD2 .Screen/x DEO2 ( right )
    ;sub-icn/d .Screen/addr DEO2
    #02 .Screen/sprite DEO
JMP2r

@sub-icn
    0000 0000 0063 647c
&b  0030 4040 f098 2414
&c  207c 6360 0000 0000
&d  0c04 18e0 0000 0000

@font ( specter8-frag font )
	0000 0000 0000 0000 0008 0808 0800 0800
	0014 1400 0000 0000 0024 7e24 247e 2400
	0008 1e28 1c0a 3c08 0000 2204 0810 2200
	0030 4832 4c44 3a00 0008 1000 0000 0000
	0004 0808 0808 0400 0020 1010 1010 2000
	0000 2214 0814 2200 0000 0808 3e08 0800
	0000 0000 0000 0810 0000 0000 3e00 0000
	0000 0000 0000 0800 0000 0204 0810 2000
	003c 464a 5262 3c00 0018 0808 0808 1c00
	003c 4202 3c40 7e00 003c 421c 0242 3c00
	000c 1424 447e 0400 007e 407c 0242 3c00
	003c 407c 4242 3c00 007e 0204 0810 1000
	003c 423c 4242 3c00 003c 4242 3e02 3c00
	0000 0010 0000 1000 0000 1000 0010 1020
	0000 0810 2010 0800 0000 003e 003e 0000
	0000 1008 0408 1000 003c 420c 1000 1000
	003c 4232 4a42 3c00 003c 4242 7e42 4200
	007c 427c 4242 7c00 003c 4240 4042 3c00
	007c 4242 4242 7c00 007e 4078 4040 7e00
	007e 4078 4040 4000 003c 4240 4642 3c00
	0042 427e 4242 4200 001c 0808 0808 1c00
	007e 0202 0242 3c00 0042 4478 4442 4200
	0040 4040 4040 7e00 0042 665a 4242 4200
	0042 6252 4a46 4200 003c 4242 4242 3c00
	007c 4242 7c40 4000 003c 4242 4244 3a00
	007c 4242 7c44 4200 003e 403c 0242 3c00
	007e 0808 0808 1000 0042 4242 4244 3a00
	0042 4242 4224 1800 0042 4242 5a66 4200
	0042 423c 4242 4200 0042 423e 0242 3c00
	007e 020c 3040 7e00 000c 0808 0808 0c00
	0040 2010 0804 0200 0030 1010 1010 3000
	0008 1400 0000 0000 0000 0000 0000 7e00
	0008 0400 0000 0000 0000 3c02 3e42 3a00
	0040 407c 4242 7c00 0000 3c42 4042 3c00
	0002 023e 4242 3e00 0000 3c42 7e40 3e00
	0000 3e40 7840 4000 0000 3c42 3e02 3c00
	0040 405c 6242 4200 0008 0018 0808 0400
	0008 0018 0808 4830 0040 4244 7844 4200
	0010 1010 1010 0c00 0000 6c52 5252 5200
	0000 5c62 4242 4200 0000 3c42 4242 3c00
	0000 7c42 427c 4040 0000 3e42 423e 0202
	0000 5c62 4040 4000 0000 3e40 3c02 7c00
	0008 7e08 0808 1000 0000 4242 4244 3a00
	0000 4242 4224 1800 0000 5252 5252 2e00
	0000 4224 1824 4200 0000 4242 3e02 7c00
	0000 7e02 3c40 7e00 000c 0810 1008 0c00
	0008 0808 0808 0800 0030 1008 0810 3000
	0000 0032 4c00 0000 3c42 99a1 a199 423c

@file
